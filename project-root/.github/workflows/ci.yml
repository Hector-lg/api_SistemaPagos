name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      # Contenedor MongoDB para pruebas de integración
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm test
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONGODB_TEST_URI: mongodb://localhost:27017/payment_system_test

      - name: Generate coverage report
        run: npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to production
        run: |
          # En un caso real, aquí irían los comandos para desplegar a tu servidor
          # Por ejemplo, para Heroku:
          # npm install -g heroku
          # heroku container:login
          # heroku container:push web --app tu-app-nombre
          # heroku container:release web --app tu-app-nombre
          npm run deploy
        env:
          # Variables para el despliegue
          NODE_ENV: production
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}